# Production Environment - Database Configuration
# Aurora PostgreSQL Serverless v2 with high availability and enhanced monitoring

# Database Module for Production Environment
module "database" {
  source = "../../modules/database"

  # Project configuration
  project_name = local.project_name
  environment  = local.environment

  # Network configuration from network module
  vpc_id                     = module.network.vpc_id
  db_subnet_group_name      = module.network.db_subnet_group_name
  database_security_group_id = module.security.database_security_group_id

  # Aurora cluster configuration
  cluster_identifier = "${local.project_name}-aurora"
  database_name     = "clinical_trial_prod"
  master_username   = "postgres"
  engine_version    = "15.4"

  # Production Serverless v2 scaling configuration
  min_capacity = 1      # Higher minimum for production availability
  max_capacity = 16     # Full capacity for production workloads
  auto_pause   = false  # Disabled for production availability

  # Network and availability (Multi-AZ for high availability)
  enable_multi_az    = true  # Multi-AZ for production
  availability_zones = slice(data.aws_availability_zones.available.names, 0, 3)

  # Backup configuration (HIPAA compliant retention)
  backup_retention_period = 35     # HIPAA requirement: 35 days minimum
  backup_window          = "03:00-04:00"
  maintenance_window     = "sun:04:00-sun:05:00"
  skip_final_snapshot    = false   # Keep final snapshot in production
  copy_tags_to_snapshot  = true

  # Security and encryption
  storage_encrypted = true
  # kms_key_id will be auto-generated by module
  enable_iam_database_authentication = true
  deletion_protection                = true   # Enabled for production protection

  # Parameter groups (use module defaults for HIPAA compliance)
  parameter_group_family = "aurora-postgresql15"

  # Instance configuration
  instance_class       = "db.serverless"
  publicly_accessible  = false

  # Enhanced monitoring for production
  enable_performance_insights             = true
  performance_insights_retention_period   = 31  # One month retention
  enable_enhanced_monitoring             = true
  monitoring_interval                    = 60   # 1-minute intervals

  # Comprehensive logging for production and HIPAA compliance
  enable_audit_logging           = true
  log_types                     = ["postgresql"]
  cloudwatch_log_retention_days = 90  # 3 months retention for production

  # Cost optimization (balanced with performance)
  enable_cost_optimization = true

  # Full HIPAA compliance for production
  enable_hipaa_compliance = true

  # Comprehensive alerting for production
  enable_connection_alarms       = true
  enable_performance_alarms      = true
  cpu_utilization_threshold      = 70    # Lower threshold for early warning
  database_connections_threshold = 80

  # Global cluster for disaster recovery (optional)
  enable_global_cluster     = false  # Can be enabled later for DR
  global_cluster_identifier = null

  # Tags
  tags = merge(local.common_tags, {
    Component           = "database"
    DatabaseEngine      = "aurora-postgresql"
    DatabaseVersion     = "15.4"
    HighAvailability   = "true"
    BackupRetention    = "35-days"
    HIPAACompliant     = "true"
    ProductionReady    = "true"
  })
}

# Data source for availability zones
data "aws_availability_zones" "available" {
  state = "available"
}

# Additional CloudWatch Composite Alarm for production
resource "aws_cloudwatch_composite_alarm" "database_health" {
  alarm_name        = "${local.project_name}-database-health-composite"
  alarm_description = "Composite alarm for overall database health"
  
  alarm_rule = join(" OR ", [
    "ALARM(${local.project_name}-database-cpu-utilization-${local.environment})",
    "ALARM(${local.project_name}-database-connections-${local.environment})",
    "ALARM(${local.project_name}-database-read-latency-${local.environment})",
    "ALARM(${local.project_name}-database-write-latency-${local.environment})"
  ])
  
  alarm_actions = [module.database.sns_topic_arn]
  ok_actions    = [module.database.sns_topic_arn]
  
  tags = merge(local.common_tags, {
    Component = "database"
    Type      = "composite-alarm"
  })
  
  depends_on = [module.database]
}

# Database read replica for reporting workloads (optional)
resource "aws_rds_cluster" "read_replica" {
  count = 0  # Disabled by default, can be enabled for heavy reporting

  cluster_identifier      = "${local.project_name}-aurora-read-replica"
  source_cluster_identifier = module.database.cluster_identifier
  engine                 = "aurora-postgresql"
  engine_version         = "15.4"

  # Serverless v2 scaling for read replica
  serverlessv2_scaling_configuration {
    max_capacity = 8   # Lower capacity for read workloads
    min_capacity = 0.5
  }

  # Security configuration
  kms_key_id                         = module.database.kms_key_id
  iam_database_authentication_enabled = true
  storage_encrypted                   = true

  tags = merge(local.common_tags, {
    Component = "database"
    Type      = "read-replica"
  })
}

# Output database connection information for other modules
output "database_connection_info" {
  description = "Database connection information for production environment"
  value = {
    cluster_endpoint    = module.database.cluster_endpoint
    reader_endpoint     = module.database.cluster_reader_endpoint
    proxy_endpoint      = module.database.db_proxy_endpoint
    port               = module.database.cluster_port
    database_name      = module.database.cluster_database_name
    secret_arn         = module.database.secrets_manager_secret_arn
    kms_key_id         = module.database.kms_key_id
  }
  sensitive = true
}

# Output for Lambda function access
output "lambda_database_config" {
  description = "Database configuration for Lambda functions"
  value = {
    cluster_identifier = module.database.cluster_identifier
    endpoint          = module.database.db_proxy_endpoint != null ? module.database.db_proxy_endpoint : module.database.cluster_endpoint
    port              = module.database.cluster_port
    database_name     = module.database.cluster_database_name
    secret_arn        = module.database.secrets_manager_secret_arn
    security_group_id = module.security.database_security_group_id
    subnet_group_name = module.network.db_subnet_group_name
    iam_role_arn      = module.database.lambda_db_access_role_arn
    use_proxy         = true
  }
  sensitive = true
}

# Output monitoring information
output "database_monitoring" {
  description = "Database monitoring configuration"
  value = {
    dashboard_url           = module.database.cloudwatch_dashboard_url
    performance_insights_url = "https://${data.aws_region.current.name}.console.aws.amazon.com/rds/home?region=${data.aws_region.current.name}#performance-insights-v20206:/resourceId/${module.database.cluster_instance_ids[0]}"
    sns_topic_arn          = module.database.sns_topic_arn
    log_groups             = module.database.cloudwatch_log_groups
    cost_budget_name       = module.database.cost_budget_name
    audit_trail_arn        = module.database.audit_trail_arn
    composite_alarm_name   = aws_cloudwatch_composite_alarm.database_health.alarm_name
  }
}

# Output compliance information
output "database_compliance" {
  description = "Database compliance and audit information"
  value = {
    hipaa_compliant        = true
    audit_logging_enabled  = true
    encryption_at_rest     = true
    encryption_in_transit  = true
    backup_encrypted       = true
    deletion_protection    = true
    audit_trail_arn        = module.database.audit_trail_arn
    audit_logs_bucket      = module.database.audit_logs_bucket
    config_recorder_name   = module.database.config_recorder_name
  }
}

# Output operational information
output "database_operational_info" {
  description = "Database operational information"
  value = merge(module.database.operational_info, {
    read_replica_available = length(aws_rds_cluster.read_replica) > 0
    proxy_enabled         = true
    global_cluster_enabled = false
  })
}

# Output cost information
output "database_cost_info" {
  description = "Database cost optimization information"
  value = {
    estimated_monthly_cost = module.database.estimated_monthly_cost
    cost_budget_name      = module.database.cost_budget_name
    backup_retention_days = 35
    monitoring_level      = "enhanced"
    multi_az_enabled      = true
  }
}

# Data source for current region
data "aws_region" "current" {}